# 
# 
# warehouses (system packages come from warehouses)
# 
#
- (defaultWarehouse):
    saveVariableAs: "defaultWarehouse"
    createWarehouseFrom:
        tarFileUrl: "https://github.com/NixOS/nixpkgs/archive/f1b9cc23aa8b1549dd7cb53dbe9fc950efc97646.tar.gz"
    arguments:
        config:
            allowUnfree: true
            cudaSupport: true
            allowUnsupportedSystem: true
            # permittedInsecurePackages: [ "openssl-1.0.2u" ]

# Examples of extra warehouses:

# - (warehouse):
#     saveVariableAs: "warehouseWithTorch_1_8_1"
#     createWarehouseFrom: { tarFileUrl: "https://github.com/NixOS/nixpkgs/archive/141439f6f11537ee349a58aaf97a5a5fc072365c.tar.gz" }
#     arguments:
#         config: {}
    
# - (warehouse):
#     saveVariableAs: "warehouseWithNcclCudaToolkit_11_2"
#     createWarehouseFrom: { tarFileUrl: "https://github.com/NixOS/nixpkgs/archive/2cdd608fab0af07647da29634627a42852a8c97f.tar.gz" }
#     arguments:
#         config: {}
        
- (warehouse):
    saveVariableAs: "warehouseForNetworking"
    createWarehouseFrom: { nixCommitHash: "c00039f697caa02208a01e7712bfe11c484cceca" }
    arguments:
        config: {}



# 
# 
# compute values (which are then used for hardware-specific packages)
# 
#

# # example1.1: using command line, the stdout of the command is parsed as aÂ JSON value before being put into a variable
# - (compute):
#     runCommand: [ "python", "-c", "from sys import platform;import json;print(json.dumps(platform == 'darwin'))" ]
#     withPackages: [ "python" ]
#     fromWarehouse: !!var defaultWarehouse
#     saveVariableAs: isMac

# # example2: same outcome as example1, but using javascript (deno)
# #           this approach is about 1000ms faster than the cli-approach above because 
# #           the deno runtime is already instantiated (the deno runtime is parsing this file)
# - (compute): 
#     value: !!deno " Deno.build.os == 'darwin' "
#     saveVariableAs: isMac

# # example3: create an isArm64 variable
#     runCommand: [ "zsh", "-c", "if [ $(arch) = 'arm64' ]; then echo 'true'; else echo 'false'; fi" ]
#     withPackages: [ "python" ]
#     fromWarehouse: !!var defaultWarehouse
#     saveVariableAs: isArm64

# # example4: create an isLinux variable
# - (compute):
#     saveVariableAs: isLinux
#     value: !!deno |
#         Deno.build.os == 'linux'

# # example5: create an isUbuntu variable
# - (compute):
#     saveVariableAs: isUbuntu
#     value: !!deno |
#         await Deno.readTextFile("/etc/os-release").catch(_=>false).then(text=>!!text.match(/ubuntu/i))

# # example6: create an isRaspbian variable
# - (compute):
#     saveVariableAs: isRaspbian
#     value: !!deno |
#         await Deno.readTextFile("/etc/os-release").catch(_=>false).then(text=>!!text.match(/raspbian/i))

# available tags:
    # !!var               # marks that a string will be intepreted as a variable name, and the value of the variable will be used
    # !!deno              # a string that will be evaluated in a deno runtime and replaced with the output
    # !!nix               # the system_tools.yaml is converted to a shell.nix file, this tag indicates that a string to be transfered directly/literally to that file
    # !!as_absolute_path  # useful for PATH, PYTHONPATH, and the like: converts a path (relative to this file) into a string that is an absolute-path

# 
# 
# env vars
# 
# 

# - (environmentVariable):
#     envVar: HOWDY
#     overwriteAs: "Howdy"

# - (environmentVariable):
#     envVar: PATH
#     prepend: !!as_absolute_path "./home" # the "." is the folder containing the system_tools.yaml file
#     joinUsing: ":"

# 
# 
# 
# packages
# 
# 
# 


# 
# core
# 
- (package):
    load: [ "deno",]
    asBuildInput: true
    from: "f1b9cc23aa8b1549dd7cb53dbe9fc950efc97646" # a commit-hash of https://github.com/NixOS/nixpkgs, e.g. https://github.com/NixOS/nixpkgs/archive/f1b9cc23aa8b1549dd7cb53dbe9fc950efc97646.tar.gz

- (package):
    load: [ "nix",]
    asBuildInput: true

- (package):
    load: [ "zsh",]
    saveVariableAs: zsh
    asBuildInput: true
    
# - (package):
#     load: [ "devbox",]
#     asBuildInput: true

# 
# example of including a linux-specific system package
# 
- (package):
    load: [ "pkgconfig",]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isLinux

- (package):
    load: [ "cmake",]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isLinux


# 
# example of including a mac-specific system package
# 
- (package):
    load: [ "xcbuild",]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isMac

- (package):
    load: [ "xcodebuild",]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isMac

- (package):
    load: [ "darwin", "libobjc", ]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isMac

- (package):
    load: [ "darwin", "apple_sdk", "frameworks", "CoreServices" ]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isMac

- (package):
    load: [ "darwin", "apple_sdk", "frameworks", "CoreFoundation" ]
    asBuildInput: true
    asNativeBuildInput: true
    onlyIf: !!var isMac



#
#
# Some very basic commands you may want to comment in
#
#
- (package):
    load: [ "which",]
    asBuildInput: true

- (package):
    load: [ "curl",]
    asBuildInput: true

- (package):
    load: [ "less",]
    asBuildInput: true

- (package):
    load: [ "man",]
    asBuildInput: true

- (package):
    load: [ "coreutils",]
    asBuildInput: true

- (package):
    load: [ "findutils",]
    asBuildInput: true

- (package):
    load: [ "wget",]
    asBuildInput: true
    
- (package):
    load: [ "nano",]
    asBuildInput: true

- (package):
    load: [ "tree",]
    asBuildInput: true
    saveVariableAs: tree

- (package):
    load: [ "zip",]
    asBuildInput: true

- (package):
    load: [ "unzip",]
    asBuildInput: true

- (package):
    load: [ "git",]
    asBuildInput: true

- (package):
    load: [ "openssh",]
    asBuildInput: true

- (package):
    load: [ "colorls",]
    asBuildInput: true

- (package):
    load: [ "unixtools", "ping",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "ifconfig",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "netstat",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "arp",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "route",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "col",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "column",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "fdisk",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "fsck",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "getconf",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "getent",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "getopt",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "hexdump",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "hostname",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "killall",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "locale",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "more",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "mount",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "ps",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "quota",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "script",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "sysctl",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "top",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "umount",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "whereis",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "write",]
    from: !!var warehouseForNetworking
    asBuildInput: true

- (package):
    load: [ "unixtools", "xxd",]
    from: !!var warehouseForNetworking


# 
# 
# fancy command line tools
# 
# 
- (package):
    load: [ "fd",]
    asBuildInput: true

- (package):
    load: [ "sd",]
    asBuildInput: true

- (package):
    load: [ "dua",]
    asBuildInput: true

- (package):
    load: [ "tealdeer",]
    asBuildInput: true

- (package):
    load: [ "bottom",]
    asBuildInput: true

- (package):
    load: [ "exa",]
    asBuildInput: true

- (package):
    load: [ "zsh-syntax-highlighting",]
    asBuildInput: true
    saveVariableAs: zsh-syntax-highlighting

- (package):
    load: [ "oh-my-zsh",]
    asBuildInput: true
    saveVariableAs: oh-my-zsh

- (package):
    load: [ "zsh-autosuggestions",]
    asBuildInput: true
    saveVariableAs: zsh-autosuggestions

- (package):
    load: [ "spaceship-prompt",]
    asBuildInput: true
    saveVariableAs: spaceship-prompt

# 
# extras
# 
- (package):
    load: [ "git-subrepo",]
    asBuildInput: true

# 
# 
# Python
# 
# 
- (package):
    load: [ "python38",]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "setuptools" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "pip" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "virtualenv" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "wheel" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "wxPython_4_1" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "scikit-learn" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "matplotlib" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "pandas" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "numpy" ]
    asBuildInput: true

- (package):
    load: [ "python39Packages", "torchWithoutCuda" ]
    asBuildInput: true

# - (package):
#     load: [ "python39Packages", "dask" ]
#     onlyIf: !!var isLinux
#     asBuildInput: true

# - (package):
#     load: [ "python39Packages", "smac" ]
#     asBuildInput: true

# - (package):
#     load: [ "python39Packages", "distro" ]
#     asBuildInput: true
    # ../../include/alsa/sound/type_compat.h:         ^~~~~~~~~~18
    # :10: fatal error: 'endian.h' file not found
    # #include <endian.h>
    #          ^~~~~~~~~~

# - (package):
#     load: [ "python39Packages", "scipy" ] # scipy>=1.7.0
#     asBuildInput: true

# - (package):
#     load: [ "python39Packages", "joblib" ]
#     asBuildInput: true

# - (package):
#     load: [ "python39Packages", "tqdm" ]
#     asBuildInput: true

# distributed>=2012.12
# pyyaml
# pandas>=1.0
# liac-arff
# threadpoolctl
# tqdm

# ConfigSpace>=0.4.21,<0.5
# pynisher>=0.6.3,<0.7
# pyrfr>=0.8.1,<0.9
# smac>=1.2,<1.3

- (package):
    load: [ "cmake" ]
    asBuildInput: true

- (package):
    load: [ "pkg-config" ]
    asBuildInput: true

- (package):
    load: [ "libffi" ]
    asBuildInput: true

# 
# open source valve index VR library
# 
# - (package):
#     load: [ "gcc" ]
#     asBuildInput: true

# - (package):
#     load: [ "gtk3" ]
#     asBuildInput: true

# - (package):
#     load: [ "libsurvive" ]
#     asBuildInput: true

# - (package):
#     load: [ "websocketd" ]
#     asBuildInput: true

# - (package):
#     load: [ "libstdcxx5" ]
#     asBuildInput: true
#     saveVariableAs: libstdcxx

# - (package):
#     load: [ "glibc" ]
#     asBuildInput: true
#     saveVariableAs: glibc

# - (package):
#     load: [ "stdenv", "cc", "cc" ]
#     asBuildInput: true
#     saveVariableAs: cc